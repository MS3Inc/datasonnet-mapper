{
    abs:(DW.Core.abs(payload.abs.input) == payload.abs.output),
    avg:(DW.Core.avg(payload.avg.input) == payload.avg.output),
    ceil:(DW.Core.ceil(payload.ceil.input)==payload.ceil.output),
    contains:(
        DW.Core.contains(payload.contains.input1,payload.contains.input1_1) &&
        DW.Core.contains(payload.contains.input2,payload.contains.input2_1) &&
        DW.Core.contains(payload.contains.input2,payload.contains.input2_2)
    ),
    daysBetween:(DW.Core.daysBetween(payload.daysBetween.input1, payload.daysBetween.input2)==payload.daysBetween.output),
    distinctBy:(
        (DW.Core.distinctBy(payload.distinctBy.input1, function(v,i) v)==payload.distinctBy.output1) &&
        (DW.Core.distinctBy(payload.distinctBy.input1, function(v,i) i)==payload.distinctBy.output2) &&
        (DW.Core.distinctBy(payload.distinctBy.input2, function(v,k) v)==payload.distinctBy.output3)
    ),
    endsWith:DW.Core.endsWith(payload.endsWith.input1, payload.endsWith.input2),
    entriesOf:(DW.Core.entriesOf(payload.entriesOf.input)==payload.entriesOf.output),
    filter:(DW.Core.filter(payload.filter.input, function(value,index) value >= 3)==payload.filter.output),
    filterObject:(
        (DW.Core.filterObject(payload.filterObject.input, function(value,key,index) index == 0) == payload.filterObject.output2) &&
        (DW.Core.filterObject(payload.filterObject.input, function(value,key,index) key == "testK") == payload.filterObject.output2)
    ),
    find:(
        (DW.Core.find(payload.find.input1, payload.find.input1_1)==payload.find.output1) &&
        (DW.Core.find(payload.find.input2, payload.find.input2_1)==payload.find.output2) &&
        (DW.Core.find(payload.find.input2, payload.find.input2_2)==payload.find.output3)
    ),
    flatMap:(
        (DW.Core.flatMap(payload.flatMap.input, function(v,i) v)==payload.flatMap.output)
    ),
    flatten:(DW.Core.flatten(payload.flatten.input)==payload.flatten.output),
    floor:(DW.Core.floor(payload.floor.input)==payload.floor.output),
    groupBy:(
        (DW.Core.groupBy(payload.groupBy.input1, function(it,idx) it.language)==payload.groupBy.output1) &&
        (DW.Core.groupBy(payload.groupBy.input2, function(v,k) v)==payload.groupBy.output2)
    ),
    isBlank:(
        DW.Core.isBlank("") &&
        DW.Core.isBlank("    ") &&
        DW.Core.isBlank(null)
    ),
    isDecimal:(DW.Core.isDecimal(payload.isDecimal.input)),
    isEmpty:(
        DW.Core.isEmpty("") &&
        DW.Core.isEmpty({}) &&
        DW.Core.isEmpty([]) &&
        DW.Core.isEmpty(null)
    ),
    isEven:DW.Core.isEven(10),
    isInteger:DW.Core.isInteger(1),
    isLeapYear:DW.Core.isLeapYear(payload.isLeapYear.input),
    isOdd:(DW.Core.isOdd(payload.isOdd.input)),
    joinBy:(DW.Core.joinBy([1,2,3],"-")=="1-2-3"),
    keysOf:(DW.Core.keysOf(payload.keysOf.input)==payload.keysOf.output),
    log:"wontdo",
    lower:DW.Core.lower(payload.lower.input)==payload.lower.output,
    map:(DW.Core.map(['a','b','c'], function(value,index) value+'_'+index))[0]=="a_0",
    mapObject:(
        (DW.Core.mapObject(payload.mapObject.input1, function(v,k,i) {[v]:{ [k]: i}})==payload.mapObject.output1) &&
        (DW.Core.mapObject(payload.mapObject.input2, function(v,k,i) {[k]: (v+5)})==payload.mapObject.output2)
    ),
    match:(DW.Core.match(payload.match.input1,payload.match.input2)==payload.match.output),
    matches:(
        (DW.Core.matches(payload.matches.input1_1,payload.matches.input1_2)) &&
        (DW.Core.matches(payload.matches.input1_1,payload.matches.input2_2)==false)
    ),
    max:(
        (DW.Core.max(payload.max.input1)==payload.max.output1) &&
        (DW.Core.max(payload.max.input2)==payload.max.output2) &&
        (DW.Core.max(payload.max.input3)==payload.max.output3)
    ),
    maxBy:(
        (DW.Core.maxBy(payload.maxBy.input1, function(i) i)==payload.maxBy.output1) &&
        (DW.Core.maxBy(payload.maxBy.input2, function(i) i)==payload.maxBy.output2) &&
        (DW.Core.maxBy(payload.maxBy.input3, function(i) i)==payload.maxBy.output3)
    ),
    min:(
        (DW.Core.min(payload.min.input1)==payload.min.output1) &&
        (DW.Core.min(payload.min.input2)==payload.min.output2) &&
        (DW.Core.min(payload.min.input3)==payload.min.output3)
    ),
    minBy:(
        (DW.Core.minBy(payload.minBy.input1, function(i) i)==payload.minBy.output1) &&
        (DW.Core.minBy(payload.minBy.input2, function(i) i)==payload.minBy.output2) &&
        (DW.Core.minBy(payload.minBy.input3, function(i) i)==payload.minBy.output3)
    ),
    mod:DW.Core.mod(payload.mod.input1,payload.mod.input2)==payload.mod.output,
    namesOf:DW.Core.namesOf(payload.namesOf.input)==payload.namesOf.output,
    native:"wontdo",
    now:DS.ZonedDateTime.now != null,
    orderBy:(
        (DW.Core.orderBy(payload.orderBy.input1, function(i)i)==payload.orderBy.output1) &&
        (DW.Core.orderBy(payload.orderBy.input2, function(i)i)==payload.orderBy.output2) &&
        (DW.Core.orderBy(payload.orderBy.input3, function(i)i.letter)==payload.orderBy.output3)
    ),
    pluck:(
        (DW.Core.pluck(payload.pluck.input2,function(value,key,index) index) == payload.pluck.output1) &&
        (DW.Core.pluck(payload.pluck.input2,function(value,key,index) { [value] : { [key]: index} })== payload.pluck.output2)
    ),
    pow:DW.Core.pow(payload.pow.input1,payload.pow.input2)==payload.pow.output,
    random:DW.Core.random()!=payload.random.not_output,
    randomint:DW.Core.randomint(payload.randomInt.input)!=payload.randomInt.not_output,
    read:"???",
    readUrl:DW.Core.readUrl(payload.readUrl.input)[payload.readUrl.key]==payload.readUrl.output,
    reduce:(
        (DW.Core.reduce(payload.reduce.input1, function(it,acc) it+acc, 0)==payload.reduce.output1) &&
        (DW.Core.reduce(payload.reduce.input2, function(it,acc) acc+it, 0)==payload.reduce.output2) &&
        (DW.Core.reduce(payload.reduce.input2, function(it,acc) acc+""+it, "")==payload.reduce.output3) &&
        (DW.Core.reduce(payload.reduce.input3, function(it,acc) acc+it, null)==payload.reduce.output4)
    ),
    replace:(
        (DW.Core.replace(payload.replace.input1_1,payload.replace.input1_2,payload.replace.input1_3)==payload.replace.output1) &&
        (DW.Core.replace(payload.replace.input2_1,payload.replace.input2_2,payload.replace.input2_3)==payload.replace.output2) &&
        (DW.Core.replace(payload.replace.input3_1,payload.replace.input3_2,payload.replace.input3_3)==payload.replace.output3)
    ),
    round:DW.Core.round(payload.round.input)==payload.round.output,
    scan:DW.Core.scan(payload.scan.input1,payload.scan.input2)==payload.scan.output,
    sizeOf:(
        DW.Core.sizeOf(payload.sizeOf.input1)==payload.sizeOf.output1 &&
        DW.Core.sizeOf(payload.sizeOf.input2)==payload.sizeOf.output2 &&
        DW.Core.sizeOf(payload.sizeOf.input3)==payload.sizeOf.output3
    ),
    splitBy:(
        DW.Core.splitBy(payload.splitBy.input1,payload.splitBy.input1_1)==payload.splitBy.output1 &&
        DW.Core.splitBy(payload.splitBy.input1,payload.splitBy.input1_2)==payload.splitBy.output2
    ),
    sqrt:DW.Core.sqrt(payload.sqrt.input)==payload.sqrt.output,
    startsWith:DW.Core.startsWith(payload.startsWith.input1,payload.startsWith.input2),
    sum:DW.Core.sum(payload.sum.input)==payload.sum.output,
    to:DW.Core.to(payload.to.input1,payload.to.input2)==payload.to.output,
    trim:(DW.Core.trim(payload.trim.input)==payload.trim.output),
    typeOf:(
        (DW.Core.typeOf(payload.typeOf.input1) == payload.typeOf.output1) &&
        (DW.Core.typeOf(payload.typeOf.input2) == payload.typeOf.output2) &&
        (DW.Core.typeOf(payload.typeOf.input3) == payload.typeOf.output3) &&
        (DW.Core.typeOf(payload.typeOf.input4) == payload.typeOf.output4) &&
        (DW.Core.typeOf(payload.typeOf.input5) == payload.typeOf.output5)
    ),
    unzip:DW.Core.unzip(payload.unzip.input)==payload.unzip.output,
    upper:DW.Core.upper(payload.upper.output)==payload.upper.output,
    uuid:(DW.Core.uuid != null),
    valuesOf:(DW.Core.valuesOf(payload.valuesOf.input))==payload.valuesOf.output,
    with:"wontdo",
    write:"???",
    xsiType:"wontdo",
    zip:(DW.Core.zip(payload.zip.input1,payload.zip.input2))==payload.zip.output
}







