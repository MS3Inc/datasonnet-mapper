name: release
on:
  workflow_dispatch:
    inputs:
      release_ver:
        description: 'Version to use when releasing'
        required: false
      snapshot_ver:
        description: 'Version to use for next development iteration'
        required: false
      gpg_secret:
        description: 'Name of the `secret` to use as the GPG key to sign the release'
        required: true
      gpg_passphrase:
        description: 'GPG passphrase to unlock the GPG secret'
        required: true
      sonatype_user:
        description: 'Sonatype OSSRH username'
        required: true
      sonatype_password:
        description: 'Sonatype OSSRH password'
        required: true

jobs:
  release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release-version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: setup git
        run: |
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global user.name "${GITHUB_ACTOR}"
      - name: Get release version
        id: release-version
        run: |
          ./mvnw -DskipTests -V --no-transfer-progress --batch-mode --settings .settings.xml clean \
            -DreleaseVersion='${{ github.event.inputs.release_ver }}' \
            -DdevelopmentVersion='${{ github.event.inputs.snapshot_ver }}' \
            release:prepare -DdryRun=true
          VERSION=$(mvn -f pom.xml.tag help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "::set-output name=version::$VERSION"
      - name: mvn clean release:prepare
        run: "./mvnw -V --no-transfer-progress --batch-mode --settings .settings.xml clean \
        -DreleaseVersion='${{ github.event.inputs.release_ver }}' \
        -DdevelopmentVersion='${{ github.event.inputs.snapshot_ver }}' \
        release:prepare"
      - id: install-secret-key
        name: Install gpg secret key
        run: |
          cat <(echo -e "${{ secrets[github.event.inputs.gpg_secret] }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
      - name: mvn release:perform
        env:
          SONATYPE_USER: ${{ github.event.inputs.sonatype_user }}
          SONATYPE_PASSWORD: ${{ github.event.inputs.sonatype_password }}
          GPG_EXECUTABLE: gpg
          GPG_PASSPHRASE: ${{ github.event.inputs.gpg_passphrase }}
        run: "./mvnw -V --no-transfer-progress --batch-mode --settings .settings.xml \
        -Darguments='--settings .settings.xml -Dlicense.skip=true -DskipTests -Dmaven.install.skip=true -P release' \
        release:perform"
  benchmarks:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Run benchmarks
        id: benchmarks
        run: |
          HEADER=$(printf "%s\n" "$( top -n 1 -b | head -n 5 | tr '\n' '|')")
          mvn clean package -DskipTests exec:exec@benchmarks
          echo "::set-output name=resources::$HEADER"
      - name: Behcnmarks Output
        run: "cat target/jmh-reports/jmh-benchmark-report.csv"
      - name: Get Version
        id: version
        run: |
          VERSION=$( git tag | tail -1 )
          echo "::set-output name=version::$VERSION"
      - name: Build Markdown File
        id: markdown
        env:
          FILE: "benchmarks/${{ steps.version.outputs.version }}"
        run: |
          mkdir -p benchmarks
          HEADER="$(echo -e "${{ steps.benchmarks.outputs.resources }}" | tr '|' '\n\n' )"
          printf "%s\n\n%s\n\n%s\n\n%s\n\n" "$(date +"%a %d %b %Y")" "${{ needs.release.outputs.version }}" "$HEADER" "$(cat target/jmh-reports/jmh-benchmark-report.csv | sed 's/\r$//' | awk '{ printf("%s%s%s", "|", $0,"|\n") } NR==1 {print "|--|--|--|--|--|--|--|--|" }' | tr -s ',' '|')" > "${FILE}.md"
          echo "::set-output name=file::$FILE"
      - name: Setup Git
        run: |
          git config --global user.email "<>"
          git config --global user.name "GitHub Actions Bot"
      - name: Commit benchmark results
        run: |
          git add ${{ steps.markdown.outputs.file }}.*
          git commit -m "Github action: updated the benchmark files"
          git push
