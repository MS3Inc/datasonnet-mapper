name: benchmarks pr comment
on:
  issue_comment:
    types: [created,edited]
jobs:
  benchmark:
    # check if the comments come from pull request, exclude those from issues.
    if: ${{ contains(github.event.comment.html_url, '/pull/') && contains(github.event.comment.body, '/runBenchmarks') }}
    runs-on: ubuntu-latest
    steps:
      - name: Get current PR
        uses: actions/github-script@v3
        id: get-pr
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }
            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
            try {
              const result = await github.pulls.get(request)
              return result.data
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          repository: ${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}
          ref: ${{ fromJSON(steps.get-pr.outputs.result).head.ref }} # or .head.sha for short hash
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
        # Packages and runs the benchmarks, uses regex in the comment to determine section to benchmark
      - name: Package and run benchmarks
        id: benchmarks
        run: |
          REGEX="/runBenchmarks (Array|Object|Binaries|Core|Crypto|Jsonpath|Math|Number|Regex|String|Url)";
          if [[ "${{ github.event.comment.body }}" =~ $REGEX ]]; then
            mvn clean package -DskipTests exec:exec -Dexec.executable="java" -Dexec.classpathScope="test" -Dexec.args="-classpath %classpath com.datasonnet.benchmarks.BenchmarkMain -f target/jmh-reports/jmh-benchmark-report.csv -t ${BASH_REMATCH[1]}"
          else
            mvn clean package -DskipTests exec:exec@benchmarks
          fi
          HEADER="Date: $(date +"%a %d %b %Y"), Processes: $(ps aux | wc -l)"
          echo "::set-output name=header::$HEADER"
          echo -e "$(cat target/jmh-reports/jmh-benchmark-report.csv)" > new.csv
          echo -e "$(cat new.csv)\n\n$(cat BENCHMARKS.csv)" > BENCHMARKS.csv
        # Adds a comment to the current PR
      - name: Add Comment
        env:
          URL: ${{ github.event.issue.comments_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo -e "${{ steps.benchmarks.outputs.header }}\n$( cat new.csv | sed 's/\r$//' | awk '{ printf("%s%s%s", "|", $0,"|\n") } NR==1 {print "|--|--|--|--|--|--|--|--|" }' | tr -s ',' '|')" > temp.csv
          DATA=$(echo '{"body": ' $( jq -Rs . temp.csv ) '}')
          rm temp.csv
          curl \
            -X POST \
            $URL \
            -H "Content-Type: application/json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            --data "$DATA"
      # Steps below this will configure Git and push the benchmarks file to the current PR branch
      #- name: Configure GIT
      #  run: |
      #    git config user.name "GitHub Actions Bot"
      #    git config user.email "<>"
      #- name: Commit benchmark results
      #  run: |
      #    git add BENCHMARKS.csv
      #    git commit -m "Github action: updated the benchmark csv file"
      #    git push